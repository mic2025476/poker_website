"""
Django settings for poker_lounge project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import firebase_admin
from firebase_admin import credentials

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
from dotenv import load_dotenv

load_dotenv()

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_REGION = os.getenv('AWS_REGION', 'eu-central-1')
AWS_SNS_TOPIC_ARN = os.getenv('AWS_SNS_TOPIC_ARN')
GOOGLE_CALENDAR_ID = os.getenv('GOOGLE_CALENDAR_ID')
# Google OAuth Settings
GOOGLE_OAUTH2_CLIENT_ID = os.getenv('GOOGLE_OAUTH2_CLIENT_ID')
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-fekli8m2u-gup7&b4=bh1g8!4_dfpw^+-+2(1e^f+&*py(pipn"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

#STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    'home',
    'gallery',
    'about',
    'menu',
    'bookings',
    'pricing',
    'contact',
    'customers',
    'payments'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'django.middleware.locale.LocaleMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "poker_lounge.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [
            BASE_DIR / 'templates',  # Add this line to include a global templates directory
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "poker_lounge.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'poker_lounge_database',
        'USER': 'poker_lounge_database',
        'PASSWORD': 'poker_lounge_database',
        'HOST': 'localhost',  # or use the IP of your PostgreSQL server
        'PORT': '5432',  # Default PostgreSQL port
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Define STATICFILES_DIRS to include the 'static' directory in your project
#STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, 'static'),
#]

# Define STATIC_ROOT for collectstatic (used in production)
#STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Media files (Uploaded by users)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

SESSION_COOKIE_AGE = 86400  # 1 day in seconds

# Google Calendar Settings
GOOGLE_CALENDAR_CREDENTIALS_FILE = 'service_account.json'
GOOGLE_CALENDAR_TOKEN_FILE = 'token.json'
GOOGLE_CALENDAR_ID = 'primary'

# Calendar events to block booking times
# Can be exact titles or partial matches
CALENDAR_BLOCKING_EVENTS = [
    'HOANG',
    'Home',  # Example: Block "Home" events
    'College time',  # Example: Block "College time" events
]
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_EXPIRE_AT_BROWSER_OPEN = False

CSRF_TRUSTED_ORIGINS = [
    'https://728f-2a03-fc82-218-1700-2825-9ebf-4f15-8ca9.ngrok-free.app',
    'https://51.21.201.248'
]

BRAINTREE_MERCHANT_ID = "dhp5r7gd5bhrvvm7"
BRAINTREE_PUBLIC_KEY = "xcf8hntvh4m2v6nt"
BRAINTREE_PRIVATE_KEY = "4a6d6d5ec9955ffb061226e73198a99e"
BRAINTREE_ENVIRONMENT = "Sandbox"  # or 'Production'

#cred = credentials.Certificate("pokerwebsite-96259-firebase-adminsdk-fbsvc-69c0d02c3a.json")
#firebase_admin.initialize_app(cred)

LANGUAGE_CODE = 'en'  # default

USE_I18N = True

LANGUAGES = [
    ('en', 'English'),
    ('de', 'German'),
    ("zh-hans", "简体中文"),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',  # or os.path.join(BASE_DIR, 'locale') for older versions
]

# Google Calendar Settings
GOOGLE_CALENDAR_CREDENTIALS_FILE = os.path.join(BASE_DIR, 'service_account.json')
GOOGLE_CALENDAR_TOKEN_FILE = os.path.join(BASE_DIR, 'token.json')

# CORS Settings for Google OAuth
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:8002",
    "http://127.0.0.1:8002",
    "https://accounts.google.com",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_ALL_ORIGINS = True  # Only for development

# For Google OAuth
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'utils.sns_utils': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# If you serve via a proxy/load-balancer that terminates TLS, ensure Django sees requests as secure:
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Cookie/security settings (set True only if you serve HTTPS)
SESSION_COOKIE_SECURE = True   # only send session cookie over HTTPS
CSRF_COOKIE_SECURE = True      # only send CSRF cookie over HTTPS

# SameSite: 'Lax' is a good default; use 'None' + Secure if cross-site flows required
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SAMESITE = 'Lax'

# Domain (optional) — set if you have a specific domain or subdomain
# SESSION_COOKIE_DOMAIN = '.yourdomain.com'

# Keep sessions longer & refresh on each request if desired
SESSION_COOKIE_AGE = 1209600  # 2 weeks (seconds)
SESSION_SAVE_EVERY_REQUEST = True

# Ensure SECRET_KEY is constant across instances (do not regenerate on each deploy)
# SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')